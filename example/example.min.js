(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '../swoosh'], factory);
    }
})(function (require, exports) {
    "use strict";
    var swoosh_1 = require('../swoosh');
    var div1 = document.getElementById("div1");
    var div2 = document.getElementById("div2");
    var div3 = document.getElementById("div3");
    var body = document.body;
    var s4 = swoosh_1.default(body, {
        elasticEgdes: {
            left: 0,
            right: 0,
            top: 50,
            bottom: 50,
        }
    });
    var s1 = swoosh_1.default(div1, {
        grid: 50,
        callback: function (e) {
            console.log('inside the options callback, obj-instance: ', this, 'event: ', e);
            return true;
        } })
        .on('collideLeft', function (e) {
        console.log('inside 2nd callback (collideLeft event): instance: ', this, 'event: ', e);
        return true;
    })
        .on('collideTop', function (e) {
        console.log('inside 2nd callback (collideTop event): instance: ', this, 'event: ', e);
        return true;
    })
        .on('collideRight', function (e) {
        console.log('inside 2nd callback (collideRight event): instance: ', this, 'event: ', e);
        return true;
    })
        .on('collideBottom', function (e) {
        console.log('inside 2nd callback (collideBottom event): instance: ', this, 'event: ', e);
        return true;
    });
    var s2 = swoosh_1.default(div2, {
        elasticEgdes: {
            left: 100,
            right: 100,
            top: 200,
            bottom: 200,
        }
    });
    var s3 = swoosh_1.default(div3, {});
});

},{"../swoosh":2}],2:[function(require,module,exports){
/*
names:
infinite
inifinity room / space / mirror
1-sphere
tardis
tesseract
4th dimension
Dimensionally transindental

pic:
https://en.wikipedia.org/wiki/Infinity_mirror

*/
(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    function default_1(container, options) {
        var Swoosh = (function () {
            function Swoosh(container, options) {
                var _this = this;
                this.container = container;
                this.options = options;
                this.container = container;
                /* set default options */
                this.options = {
                    grid: 1,
                    elasticEgdes: {
                        left: 50,
                        right: 50,
                        top: 50,
                        bottom: 50,
                    },
                    callback: this.always
                };
                Object.assign(this.options, options); //merge options object
                console.log(this.options);
                this.container.className += " outer";
                /* create inner div element and append it to the container with its contents in it */
                this.inner = document.createElement("div");
                this.inner.className += " inner";
                /* move all childNodes to the new inner element */
                while (this.container.childNodes.length > 0) {
                    this.inner.appendChild(this.container.childNodes[0]);
                }
                this.container.appendChild(this.inner);
                this.inner.style.minWidth = this.container.scrollWidth + 'px';
                this.inner.style.minHeight = this.container.scrollHeight + 'px';
                this.inner.style.paddingLeft = this.options.elasticEgdes.left + 'px';
                this.inner.style.paddingRight = this.options.elasticEgdes.right + 'px';
                this.inner.style.paddingTop = this.options.elasticEgdes.top + 'px';
                this.inner.style.paddingBottom = this.options.elasticEgdes.bottom + 'px';
                this.scrollElement = this.inner.parentElement.tagName == "BODY" ? document.documentElement : this.inner.parentElement;
                console.log(this.options.elasticEgdes.left);
                this.scrollTo(this.options.elasticEgdes.left, this.options.elasticEgdes.top);
                /*this.container.addEventListener('wheel', function(e){
                  console.log('scroll: ', e);
                  if (e.preventDefault)
                      e.preventDefault();
                  e.returnValue = false;
                });*/
                this.mouseDownHandler = function (e) { return _this.mouseDown(e); };
                this.inner.addEventListener('mousedown', this.mouseDownHandler);
            }
            Swoosh.prototype.mouseDown = function (e) {
                var _this = this;
                var elementBehindCursor = document.elementFromPoint(e.clientX, e.clientY);
                /* find the next parent which is an inner element */
                while (elementBehindCursor && !elementBehindCursor.classList.contains('inner')) {
                    elementBehindCursor = elementBehindCursor.parentElement;
                }
                if (this.inner == elementBehindCursor) {
                    this.inner.className += ' grabbing';
                    /* note the origin positions */
                    this.dragOriginLeft = e.clientX;
                    this.dragOriginTop = e.clientY;
                    this.dragOriginScrollLeft = this.scrollElement.scrollLeft;
                    this.dragOriginScrollTop = this.scrollElement.scrollTop;
                    /* it looks strane if scroll-behavior is set to smooth */
                    this.parentOriginStyle = this.inner.parentElement.style.cssText;
                    this.inner.parentElement.style.setProperty('scroll-behavior', 'auto');
                    this.mouseMoveHandler = this.mouseMove.bind(this);
                    document.addEventListener('mousemove', this.mouseMoveHandler);
                    this.mouseUpHandler = function (e) { return _this.mouseUp(e); };
                    document.addEventListener('mouseup', this.mouseUpHandler);
                }
            };
            Swoosh.prototype.mouseUp = function (e) {
                //stick the element to the grid
                var x = Math.round((this.dragOriginLeft + this.dragOriginScrollLeft - e.clientX) / this.options.grid) * this.options.grid;
                var y = Math.round((this.dragOriginTop + this.dragOriginScrollTop - e.clientY) / this.options.grid) * this.options.grid;
                var scrollMaxLeft = (this.scrollElement.scrollWidth - this.scrollElement.clientWidth) - this.options.elasticEgdes.left;
                var scrollMaxTop = (this.scrollElement.scrollHeight - this.scrollElement.clientHeight) - this.options.elasticEgdes.top;
                x = (x > scrollMaxLeft) ? scrollMaxLeft : (x < this.options.elasticEgdes.left) ? this.options.elasticEgdes.left : x;
                y = (y > scrollMaxTop) ? scrollMaxTop : (y < this.options.elasticEgdes.top) ? this.options.elasticEgdes.top : y;
                this.inner.className = this.inner.className.replace(/\b grabbing\b/, '');
                this.inner.parentElement.style.cssText = this.parentOriginStyle;
                this.scrollTo(x, y);
                document.removeEventListener('mousemove', this.mouseMoveHandler);
                document.removeEventListener('mouseup', this.mouseUpHandler);
            };
            Swoosh.prototype.mouseMove = function (e) {
                e.preventDefault();
                var x = this.dragOriginLeft + this.dragOriginScrollLeft - e.clientX;
                var y = this.dragOriginTop + this.dragOriginScrollTop - e.clientY;
                this.scrollTo(x, y);
            };
            /* scroll helper method */
            Swoosh.prototype.scrollTo = function (x, y) {
                var scrollMaxLeft = (this.scrollElement.scrollWidth - this.scrollElement.clientWidth);
                var scrollMaxTop = (this.scrollElement.scrollHeight - this.scrollElement.clientHeight);
                /* no negative values or greater than the maximum */
                var x = (x > scrollMaxLeft) ? scrollMaxLeft : (x < 0) ? 0 : x;
                var y = (y > scrollMaxTop) ? scrollMaxTop : (y < 0) ? 0 : y;
                /* remember the old values */
                this.originScrollLeft = this.scrollElement.scrollLeft;
                this.originScrollTop = this.scrollElement.scrollTop;
                this.scrollElement.scrollTo(x, y);
                /* the collideLeft event */
                if (x == 0 && this.originScrollLeft != x) {
                    var event = document.createEvent("HTMLEvents");
                    event.initEvent("collideLeft", true, true);
                    this.inner.dispatchEvent(event);
                }
                /* the collideTop event */
                if (y == 0 && this.originScrollTop != y) {
                    var event = document.createEvent("HTMLEvents");
                    event.initEvent("collideTop", true, true);
                    this.inner.dispatchEvent(event);
                }
                /* the collideRight event */
                if (x == scrollMaxLeft && this.originScrollLeft != x) {
                    var event = document.createEvent("HTMLEvents");
                    event.initEvent("collideRight", true, true);
                    this.inner.dispatchEvent(event);
                }
                /* the collideBottom event */
                if (y == scrollMaxTop && this.originScrollTop != y) {
                    var event = document.createEvent("HTMLEvents");
                    event.initEvent("collideBottom", true, true);
                    this.inner.dispatchEvent(event);
                }
            };
            /* method to register custom event callbacks */
            Swoosh.prototype.on = function (event, callback) {
                console.log('on() event callback register', event);
                this.inner.addEventListener(event, callback.bind(this));
                return this;
            };
            Swoosh.prototype.always = function () { console.log('always()'); return true; };
            return Swoosh;
        }());
        /* return an instance of the object */
        return new Swoosh(container, options);
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = default_1;
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
